name: Test & Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build LPA Dashboard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Images
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Build Images
        run: |
          docker-compose -f docker/docker-compose.ci.yml build --parallel app pact-stub
          mkdir -p /tmp/images
          docker save -o /tmp/images/app.tar docker_app:latest
          docker save -o /tmp/images/pact-stub.tar docker_pact-stub:latest

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - uses: unfor19/install-aws-cli-action@v1

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install modules
        run: |
          go mod download

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v1.0.0
        with:
          gotestsum_version: 1.6.4
      - run: mkdir -p test-results

      - name: Set Pact Standalone version
        run: |
          echo "pact_version=1.88.79" >> $GITHUB_ENV
      - name: Cache Pact
        id: cache-pact
        uses: actions/cache@v3
        with:
          path: ./pact/
          key: ${{ runner.os }}-pact-${{ env.pact_version }}
      - name: Add Pact to Path
        if: steps.cache-pact.outputs.cache-hit == 'true'
        run: |
          echo "$PWD/pact/bin" >> $GITHUB_PATH
      - name: Download pact tools
        if: steps.cache-pact.outputs.cache-hit != 'true'
        run: |
          curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v${{ env.pact_version }}/pact-${{ env.pact_version }}-linux-x86_64.tar.gz
          tar xzf pact-${{ env.pact_version }}-linux-x86_64.tar.gz
          echo "$PWD/pact/bin" >> $GITHUB_PATH

      - name: Run Tests
        run: |
          gotestsum --junitfile test-results/unit-tests.xml -- ./... -coverprofile=test-results/test-coverage.txt

      - name: Run SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Define Pact tag
        id: pact_tag
        run: |
          if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
              echo "::set-output name=TAG::${{github.event.pull_request.head.sha}}"
              echo "::set-output name=BRANCH::${{github.head_ref}}"
          else
              echo "::set-output name=TAG::${{github.sha}}"
              echo "::set-output name=BRANCH::main"
          fi
      - name: Publish pacts
        run: |
          pact-broker publish ./pacts/sirius-lpa-dashboard-sirius.json \
            --consumer-app-version ${{ steps.pact_tag.outputs.TAG }} \
            --tag ${{ steps.pact_tag.outputs.BRANCH }} \
            --broker-base-url https://pact-broker.api.opg.service.justice.gov.uk \
            --broker-username admin \
            --broker-password ${{ secrets.PACT_BROKER_PASSWORD }}
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v3
        with:
          files: test-results/test-coverage.txt
          fail_ci_if_error: true
          verbose: true
      - name: Persist Pacts
        uses: actions/upload-artifact@v3
        with:
          name: pacts
          path: |
            ./pacts/sirius-lpa-dashboard-sirius.json
            ./pacts/ignored-ignored.json

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run linting
        uses: golangci/golangci-lint-action@v3

  acceptance-test:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Cache Images
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: pacts
          path: ./pacts
      - name: Retrieve pact
        run: |
          docker container create --name temp -v pacts_data:/root hello-world
          docker cp ./pacts/ignored-ignored.json temp:/root/ignored-ignored.json
          docker cp ./pacts/sirius-lpa-dashboard-sirius.json temp:/root/sirius-lpa-dashboard-sirius.json

      - name: Restore images
        run: |
          docker load -i /tmp/images/app.tar
          docker load -i /tmp/images/pact-stub.tar

      - name: Run pa11y
        run: |
          docker-compose -f docker/docker-compose.ci.yml run --entrypoint="pa11y-ci" puppeteer

      - name: Run Lighthouse
        run: |
          docker-compose -f docker/docker-compose.ci.yml run --entrypoint="lhci autorun" puppeteer

  cypress:
    name: Cypress
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    steps:
      - uses: actions/checkout@v3
      - name: Cache Images
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: pacts
          path: ./pacts
      - name: Retrieve pact
        run: |
          docker container create --name temp -v pacts_data:/root hello-world
          docker cp ./pacts/ignored-ignored.json temp:/root/ignored-ignored.json
          docker cp ./pacts/sirius-lpa-dashboard-sirius.json temp:/root/sirius-lpa-dashboard-sirius.json
      - name: Restore images
        run: |
          docker load -i /tmp/images/app.tar
          docker load -i /tmp/images/pact-stub.tar
      - name: Start app
        run: |
          docker-compose -f docker/docker-compose.ci.yml up -d pact-stub app

      - name: Cypress Tests
        uses: cypress-io/github-action@v5.0.4
        with:
          browser: chrome

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  push:
    name: "Build & Push Containers"
    runs-on: ubuntu-latest
    needs: ["build", "test", "lint", "acceptance-test", "cypress"]
    outputs:
      branch: ${{ steps.set-outputs.outputs.branch }}
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=$(echo ${{ github.head_ref }} | sed 's/\//-/g') >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@v1

      - name: Cache Images
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Restore Image
        run: |
          docker load -i /tmp/images/app.tar
          docker tag docker_app:latest sirius-lpa-dashboard:latest
      - name: Scan
        run: |
          docker run --rm  -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image sirius-lpa-dashboard:latest

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.60.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: 1.0.0
          DEFAULT_BRANCH: main
          DEFAULT_BUMP: minor
          PRERELEASE: true
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: 311462405659

      - name: Push Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sirius/sirius-lpa-dashboard
        run: |
          docker tag sirius-lpa-dashboard:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          docker tag sirius-lpa-dashboard:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          if [ $BRANCH_NAME == "main" ]; then
            docker tag sirius-lpa-dashboard:latest $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ steps.bump_version.outputs.tag }}
            # We want all of the tags pushed
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          fi

  push-tags:
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-sirius-lpa-dashboard-latest-green-build" --type "String" --value "${{ needs.push.outputs.tag}}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-sirius-lpa-dashboard"
